@startuml aws_architecture
' Uncomment the line below for "dark mode" styling
'!$AWS_DARK = true

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/AWSSimplified.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/Containers/ElasticContainerRegistry.puml
!include AWSPuml/Containers/ElasticContainerServiceService.puml
!include AWSPuml/Containers/ElasticContainerServiceTask.puml
!include AWSPuml/Groups/AvailabilityZone.puml
!include AWSPuml/Groups/AWSCloud.puml
!include AWSPuml/Groups/PrivateSubnet.puml
!include AWSPuml/Groups/PublicSubnet.puml
!include AWSPuml/Groups/VPC.puml
!include AWSPuml/ManagementGovernance/CloudWatch.puml
!include AWSPuml/NetworkingContentDelivery/CloudFront.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancingApplicationLoadBalancer.puml
!include AWSPuml/NetworkingContentDelivery/VPCEndpoints.puml
!include AWSPuml/NetworkingContentDelivery/VPCInternetGateway.puml
!include AWSPuml/NetworkingContentDelivery/VPCNATGateway.puml
!include AWSPuml/SecurityIdentityCompliance/Cognito.puml
!include AWSPuml/Storage/SimpleStorageService.puml


top to bottom direction
hide stereotype
skinparam linetype ortho

title AWS Architecture case4

actor "ユーザ" as user
AWSCloudGroup(cloud) {
  CloudWatch(cloudwatch, "CloudWatch", "") #Transparent
  ElasticContainerRegistry(ecr, "Elastic Container Registry", "") #Transparent
  APIGateway(api_gateway, "API Gateway", "") #Transparent
  CloudFront(cloudfront, "CloudFront", "") #Transparent
  Cognito(cognito, "Cognito", "") #Transparent
  SimpleStorageService(s3, "S3", "") #Transparent

  VPCGroup(vpc, "virtual private cloud (10.0.0.0/16)") {
    VPCEndpoints(vpc_endpoints, "VPC endpoints", "") #Transparent
    ElasticLoadBalancingApplicationLoadBalancer(alb, "Application Load Balancer", "") #Transparent
    user -d-> api_gateway : HTTPS
    user -d-> cognito : トークンの取得
    user -d-> cloudfront : HTTPS
    api_gateway -d-> alb : VPC link
    cloudfront -d-> s3: frontend取得
    api_gateway -d-> cognito: トークンの検証
    vpc_endpoints ..> ecr
    vpc_endpoints ..> cloudwatch

    AvailabilityZoneGroup(az_1, "\tap-northeast-1a\t") {
      PrivateSubnetGroup(az_1_private, "private subnet\n(10.0.00.0/24)") {
        ElasticContainerServiceService(az_1_ecs_1, "ECS", "") #Transparent
      }
      alb -d-> az_1_ecs_1: /app1
      az_1_ecs_1 .d.> vpc_endpoints
    }
    AvailabilityZoneGroup(az_2, "\tap-northeast-1c\t") {
      PrivateSubnetGroup(az_2_private, "private subnet\n(10.0.01.0/24)") {
        ElasticContainerServiceService(az_2_ecs_1, "ECS", "") #Transparent
      }
      alb -d-> az_2_ecs_1: /app2
      az_2_ecs_1 .d.> vpc_endpoints
    }
  }
}
@enduml