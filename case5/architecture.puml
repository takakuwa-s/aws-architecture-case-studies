@startuml aws_architecture
' Uncomment the line below for "dark mode" styling
'!$AWS_DARK = true

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/AWSSimplified.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/ApplicationIntegration/EventBridge.puml
!include AWSPuml/ApplicationIntegration/SimpleQueueService.puml
!include AWSPuml/ApplicationIntegration/SimpleNotificationService.puml
!include AWSPuml/Containers/ElasticContainerRegistry.puml
!include AWSPuml/Containers/ElasticContainerServiceService.puml
!include AWSPuml/Containers/ElasticContainerServiceTask.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Database/ElastiCacheElastiCacheforRedis.puml
!include AWSPuml/Groups/AvailabilityZone.puml
!include AWSPuml/Groups/AWSCloud.puml
!include AWSPuml/Groups/PrivateSubnet.puml
!include AWSPuml/Groups/PublicSubnet.puml
!include AWSPuml/Groups/VPC.puml
!include AWSPuml/ManagementGovernance/CloudWatch.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancingApplicationLoadBalancer.puml
!include AWSPuml/NetworkingContentDelivery/VPCEndpoints.puml
!include AWSPuml/NetworkingContentDelivery/VPCInternetGateway.puml
!include AWSPuml/NetworkingContentDelivery/VPCNATGateway.puml
!include AWSPuml/Storage/SimpleStorageService.puml




top to bottom direction
hide stereotype
skinparam linetype ortho

title AWS Architecture case4

actor "ユーザ" as user
AWSCloudGroup(cloud) {
  APIGateway(api_gateway, "API Gateway", "") #Transparent
  EventBridge(eventbridge, "EventBridge", "") #Transparent
  CloudWatch(cloudwatch, "CloudWatch", "") #Transparent
  DynamoDB(dynamodb, "DynamoDB", "") #Transparent
  ElasticContainerRegistry(ecr, "Elastic Container Registry", "") #Transparent
  SimpleNotificationService(sns, "SNS", "") #Transparent
  SimpleQueueService(sqs, "SQS", "") #Transparent
  SimpleStorageService(s3, "S3", "") #Transparent

  VPCGroup(vpc, "virtual private cloud (10.0.0.0/16)") {
    VPCEndpoints(vpc_endpoints, "VPC endpoints", "") #Transparent
    ElasticLoadBalancingApplicationLoadBalancer(alb, "Application Load Balancer", "") #Transparent
    user <-d-> api_gateway : HTTPS
    api_gateway <-d-> alb : VPC link
    vpc_endpoints <--> dynamodb
    vpc_endpoints <-- sqs
    vpc_endpoints --> cloudwatch
    vpc_endpoints <-- s3
    vpc_endpoints <-- ecr

    AvailabilityZoneGroup(az_1, "\tap-northeast-1a\t") {
      PrivateSubnetGroup(az_1_private1, "private subnet\n(10.0.00.0/24)") {
        ElasticContainerServiceService(az_1_ecs_1, "ECS", "") #Transparent
      }
      PrivateSubnetGroup(az_1_private2, "private subnet\n(10.0.10.0/24)") {
        ElastiCacheElastiCacheforRedis(az_1_redis, "ElastiCache for Redis", "") #Transparent
      }
      alb <-d-> az_1_ecs_1
      az_1_ecs_1 <-d-> vpc_endpoints
      az_1_ecs_1 <-d-> az_1_redis
    }
    AvailabilityZoneGroup(az_2, "\tap-northeast-1c\t") {
      PrivateSubnetGroup(az_2_private1, "private subnet\n(10.0.01.0/24)") {
        ElasticContainerServiceService(az_2_ecs_1, "ECS", "") #Transparent
      }
      PrivateSubnetGroup(az_2_private2, "private subnet\n(10.0.11.0/24)") {
        ElastiCacheElastiCacheforRedis(az_2_redis, "ElastiCache for Redis", "") #Transparent
      }
      alb <-d-> az_2_ecs_1
      az_2_ecs_1 <-d-> vpc_endpoints
      az_2_ecs_1 <-d-> az_2_redis
    }
  }
  dynamodb -> eventbridge : DynamoDB stream
  eventbridge --> sqs : forward to SQS
  eventbridge --> sns : forward to SNS
  eventbridge --> cloudwatch : store event log
}
@enduml